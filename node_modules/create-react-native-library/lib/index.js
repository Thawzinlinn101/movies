"use strict";

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _ejs = _interopRequireDefault(require("ejs"));

var _dedent = _interopRequireDefault(require("dedent"));

var _kleur = _interopRequireDefault(require("kleur"));

var _yargs = _interopRequireDefault(require("yargs"));

var _crossSpawn = _interopRequireDefault(require("cross-spawn"));

var _ora = _interopRequireDefault(require("ora"));

var _validateNpmPackageName = _interopRequireDefault(require("validate-npm-package-name"));

var _githubUsername = _interopRequireDefault(require("github-username"));

var _prompts = _interopRequireDefault(require("./utils/prompts"));

var _generateExampleApp = _interopRequireDefault(require("./utils/generateExampleApp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FALLBACK_BOB_VERSION = '0.20.0';
const BINARIES = /(gradlew|\.(jar|keystore|png|jpg|gif))$/;

const COMMON_FILES = _path.default.resolve(__dirname, '../templates/common');

const TURBOREPO_FILES = _path.default.resolve(__dirname, '../templates/turborepo');

const JS_FILES = _path.default.resolve(__dirname, '../templates/js-library');

const EXPO_FILES = _path.default.resolve(__dirname, '../templates/expo-library');

const CPP_FILES = _path.default.resolve(__dirname, '../templates/cpp-library');

const EXAMPLE_FILES = _path.default.resolve(__dirname, '../templates/example-legacy');

const NATIVE_COMMON_FILES = _path.default.resolve(__dirname, '../templates/native-common');

const NATIVE_FILES = {
  module_legacy: _path.default.resolve(__dirname, '../templates/native-library-legacy'),
  module_new: _path.default.resolve(__dirname, '../templates/native-library-new'),
  module_mixed: _path.default.resolve(__dirname, '../templates/native-library-mixed'),
  view_legacy: _path.default.resolve(__dirname, '../templates/native-view-legacy'),
  view_mixed: _path.default.resolve(__dirname, '../templates/native-view-mixed'),
  view_new: _path.default.resolve(__dirname, '../templates/native-view-new')
};
const JAVA_FILES = {
  module_legacy: _path.default.resolve(__dirname, '../templates/java-library-legacy'),
  module_new: _path.default.resolve(__dirname, '../templates/java-library-new'),
  module_mixed: _path.default.resolve(__dirname, '../templates/java-library-mixed'),
  view_legacy: _path.default.resolve(__dirname, '../templates/java-view-legacy'),
  view_mixed: _path.default.resolve(__dirname, '../templates/java-view-mixed'),
  view_new: _path.default.resolve(__dirname, '../templates/java-view-new')
};
const OBJC_FILES = {
  module_common: _path.default.resolve(__dirname, '../templates/objc-library'),
  view_legacy: _path.default.resolve(__dirname, '../templates/objc-view-legacy'),
  view_mixed: _path.default.resolve(__dirname, '../templates/objc-view-mixed'),
  view_new: _path.default.resolve(__dirname, '../templates/objc-view-new')
};
const KOTLIN_FILES = {
  module_legacy: _path.default.resolve(__dirname, '../templates/kotlin-library-legacy'),
  module_new: _path.default.resolve(__dirname, '../templates/kotlin-library-new'),
  module_mixed: _path.default.resolve(__dirname, '../templates/kotlin-library-mixed'),
  view_legacy: _path.default.resolve(__dirname, '../templates/kotlin-view-legacy'),
  view_mixed: _path.default.resolve(__dirname, '../templates/kotlin-view-mixed'),
  view_new: _path.default.resolve(__dirname, '../templates/kotlin-view-new')
};
const SWIFT_FILES = {
  module_legacy: _path.default.resolve(__dirname, '../templates/swift-library-legacy'),
  view_legacy: _path.default.resolve(__dirname, '../templates/swift-view-legacy')
};
const CPP_VIEW_FILES = {
  // view_legacy does NOT need component registration
  view_mixed: _path.default.resolve(__dirname, '../templates/cpp-view-mixed'),
  view_new: _path.default.resolve(__dirname, '../templates/cpp-view-new')
};
const LANGUAGE_CHOICES = [{
  title: 'Java & Objective-C',
  value: 'java-objc',
  types: ['module-legacy', 'module-new', 'module-mixed', 'view-mixed', 'view-new', 'view-legacy']
}, {
  title: 'Kotlin & Objective-C',
  value: 'kotlin-objc',
  types: ['module-legacy', 'module-new', 'module-mixed', 'view-mixed', 'view-new', 'view-legacy']
}, {
  title: 'Java & Swift',
  value: 'java-swift',
  types: ['module-legacy', 'view-legacy']
}, {
  title: 'Kotlin & Swift',
  value: 'kotlin-swift',
  types: ['module-legacy', 'view-legacy']
}, {
  title: 'C++ for Android & iOS',
  value: 'cpp',
  types: ['module-legacy', 'module-mixed', 'module-new']
}, {
  title: 'JavaScript for Android, iOS & Web',
  value: 'js',
  types: ['library']
}];
const NEWARCH_DESCRIPTION = 'requires new arch (experimental)';
const BACKCOMPAT_DESCRIPTION = 'supports new arch (experimental)';
const TYPE_CHOICES = [{
  title: 'JavaScript library',
  value: 'library',
  description: 'supports Expo Go and Web'
}, {
  title: 'Native module',
  value: 'module-legacy',
  description: 'bridge for native APIs to JS'
}, {
  title: 'Native view',
  value: 'view-legacy',
  description: 'bridge for native views to JS'
}, {
  title: 'Turbo module with backward compat',
  value: 'module-mixed',
  description: BACKCOMPAT_DESCRIPTION
}, {
  title: 'Turbo module',
  value: 'module-new',
  description: NEWARCH_DESCRIPTION
}, {
  title: 'Fabric view with backward compat',
  value: 'view-mixed',
  description: BACKCOMPAT_DESCRIPTION
}, {
  title: 'Fabric view',
  value: 'view-new',
  description: NEWARCH_DESCRIPTION
}];
const args = {
  'slug': {
    description: 'Name of the npm package',
    type: 'string'
  },
  'description': {
    description: 'Description of the npm package',
    type: 'string'
  },
  'author-name': {
    description: 'Name of the package author',
    type: 'string'
  },
  'author-email': {
    description: 'Email address of the package author',
    type: 'string'
  },
  'author-url': {
    description: 'URL for the package author',
    type: 'string'
  },
  'repo-url': {
    description: 'URL for the repository',
    type: 'string'
  },
  'languages': {
    description: 'Languages you want to use',
    choices: LANGUAGE_CHOICES.map(({
      value
    }) => value)
  },
  'type': {
    description: 'Type of library you want to develop',
    choices: TYPE_CHOICES.map(({
      value
    }) => value)
  },
  'react-native-version': {
    description: 'Version of React Native to use, uses latest if not specified',
    type: 'string'
  },
  'turborepo': {
    description: 'Whether to configure Turborepo for the project',
    type: 'boolean'
  }
};

async function create(argv) {
  const folder = _path.default.join(process.cwd(), argv.name);

  if (await _fsExtra.default.pathExists(folder)) {
    console.log(`A folder already exists at ${_kleur.default.blue(folder)}! Please specify another folder name or delete the existing one.`);
    process.exit(1);
  }

  try {
    const child = (0, _crossSpawn.default)('npx', ['--help']);
    await new Promise((resolve, reject) => {
      child.once('error', reject);
      child.once('close', resolve);
    });
  } catch (error) {
    // @ts-expect-error: TS doesn't know about `code`
    if (error != null && error.code === 'ENOENT') {
      console.log(`Couldn't find ${_kleur.default.blue('npx')}! Please install it by running ${_kleur.default.blue('npm install -g npx')}`);
      process.exit(1);
    } else {
      throw error;
    }
  }

  let name, email;

  try {
    name = _crossSpawn.default.sync('git', ['config', '--get', 'user.name']).stdout.toString().trim();
    email = _crossSpawn.default.sync('git', ['config', '--get', 'user.email']).stdout.toString().trim();
  } catch (e) {// Ignore error
  }

  const basename = _path.default.basename(argv.name);

  const questions = {
    'slug': {
      type: 'text',
      name: 'slug',
      message: 'What is the name of the npm package?',
      initial: (0, _validateNpmPackageName.default)(basename).validForNewPackages ? /^(@|react-native)/.test(basename) ? basename : `react-native-${basename}` : undefined,
      validate: input => (0, _validateNpmPackageName.default)(input).validForNewPackages || 'Must be a valid npm package name'
    },
    'description': {
      type: 'text',
      name: 'description',
      message: 'What is the description for the package?',
      validate: input => Boolean(input) || 'Cannot be empty'
    },
    'author-name': {
      type: 'text',
      name: 'authorName',
      message: 'What is the name of package author?',
      initial: name,
      validate: input => Boolean(input) || 'Cannot be empty'
    },
    'author-email': {
      type: 'text',
      name: 'authorEmail',
      message: 'What is the email address for the package author?',
      initial: email,
      validate: input => /^\S+@\S+$/.test(input) || 'Must be a valid email address'
    },
    'author-url': {
      type: 'text',
      name: 'authorUrl',
      message: 'What is the URL for the package author?',
      // @ts-ignore: this is supported, but types are wrong
      initial: async previous => {
        try {
          const username = await (0, _githubUsername.default)(previous);
          return `https://github.com/${username}`;
        } catch (e) {// Ignore error
        }

        return undefined;
      },
      validate: input => /^https?:\/\//.test(input) || 'Must be a valid URL'
    },
    'repo-url': {
      type: 'text',
      name: 'repoUrl',
      message: 'What is the URL for the repository?',
      // @ts-ignore: this is supported, but types are wrong
      initial: (_, answers) => {
        if (/^https?:\/\/github.com\/[^/]+/.test(answers.authorUrl)) {
          return `${answers.authorUrl}/${answers.slug.replace(/^@/, '').replace(/\//g, '-')}`;
        }

        return '';
      },
      validate: input => /^https?:\/\//.test(input) || 'Must be a valid URL'
    },
    'type': {
      type: 'select',
      name: 'type',
      message: 'What type of library do you want to develop?',
      choices: TYPE_CHOICES
    },
    'languages': {
      type: 'select',
      name: 'languages',
      message: 'Which languages do you want to use?',
      choices: (_, values) => {
        return LANGUAGE_CHOICES.filter(choice => {
          if (choice.types) {
            return choice.types.includes(values.type);
          }

          return true;
        });
      }
    }
  }; // Validate arguments passed to the CLI

  for (const [key, value] of Object.entries(argv)) {
    if (value == null) {
      continue;
    }

    const question = questions[key];

    if (question == null) {
      continue;
    }

    let valid = question.validate ? question.validate(String(value)) : true; // We also need to guard against invalid choices
    // If we don't already have a validation message to provide a better error

    if (typeof valid !== 'string' && 'choices' in question) {
      const choices = typeof question.choices === 'function' ? question.choices(undefined, argv, question) : question.choices;

      if (choices && !choices.some(choice => choice.value === value)) {
        valid = `Supported values are - ${choices.map(c => _kleur.default.green(c.value))}`;
      }
    }

    if (valid !== true) {
      let message = `Invalid value ${_kleur.default.red(String(value))} passed for ${_kleur.default.blue(key)}`;

      if (typeof valid === 'string') {
        message += `: ${valid}`;
      }

      console.log(message);
      process.exit(1);
    }
  }

  const {
    slug,
    description,
    authorName,
    authorEmail,
    authorUrl,
    repoUrl,
    type = 'module-mixed',
    languages = type === 'library' ? 'js' : 'java-objc',
    reactNativeVersion,
    turborepo
  } = { ...argv,
    ...(await (0, _prompts.default)(Object.entries(questions).filter(([k, v]) => {
      var _v$validate;

      // Skip questions which are passed as parameter and pass validation
      if (argv[k] != null && ((_v$validate = v.validate) === null || _v$validate === void 0 ? void 0 : _v$validate.call(v, argv[k])) !== false) {
        return false;
      } // Skip questions with a single choice


      if (Array.isArray(v.choices) && v.choices.length === 1) {
        return false;
      }

      return true;
    }).map(([, v]) => {
      const {
        type,
        choices
      } = v; // Skip dynamic questions with a single choice

      if (type === 'select' && typeof choices === 'function') {
        return { ...v,
          type: (prev, values, prompt) => {
            const result = choices(prev, { ...argv,
              ...values
            }, prompt);

            if (result && result.length === 1) {
              return null;
            }

            return type;
          }
        };
      }

      return v;
    })))
  }; // Get latest version of Bob from NPM

  let version;

  try {
    version = await Promise.race([new Promise(resolve => setTimeout(() => resolve(FALLBACK_BOB_VERSION), 1000)), new Promise((resolve, reject) => {
      var _npm$stdout, _npm$stderr;

      const npm = (0, _crossSpawn.default)('npm', ['view', 'react-native-builder-bob', 'dist-tags.latest']);
      (_npm$stdout = npm.stdout) === null || _npm$stdout === void 0 ? void 0 : _npm$stdout.on('data', data => resolve(data.toString().trim()));
      (_npm$stderr = npm.stderr) === null || _npm$stderr === void 0 ? void 0 : _npm$stderr.on('data', data => reject(data.toString().trim()));
      npm.on('error', err => reject(err));
    })]);
  } catch (e) {
    // Fallback to a known version if we couldn't fetch
    version = FALLBACK_BOB_VERSION;
  }

  const moduleType = type.startsWith('view-') ? 'view' : 'module';
  const arch = type === 'module-new' || type === 'view-new' ? 'new' : type === 'module-mixed' || type === 'view-mixed' ? 'mixed' : 'legacy';
  const example = type === 'library' ? 'expo' : 'native';
  const project = slug.replace(/^(react-native-|@[^/]+\/)/, '');
  let namespace;

  if (slug.startsWith('@') && slug.includes('/')) {
    var _slug$split$;

    namespace = (_slug$split$ = slug.split('/')[0]) === null || _slug$split$ === void 0 ? void 0 : _slug$split$.replace(/[^a-z0-9]/g, '').toLowerCase();
  } // Create a package identifier with specified namespace when possible


  const pack = `${namespace ? `${namespace}.` : ''}${project.replace(/[^a-z0-9]/g, '').toLowerCase()}`;
  const options = {
    bob: {
      version: version || FALLBACK_BOB_VERSION
    },
    project: {
      slug,
      description,
      name: /^[A-Z]/.test(argv.name) && /^[a-z0-9]+$/i.test(argv.name) ? // If the project name is already in PascalCase, use it as-is
      argv.name : // Otherwise, convert it to PascalCase and remove any non-alphanumeric characters
      `${project.charAt(0).toUpperCase()}${project.replace(/[^a-z0-9](\w)/g, (_, $1) => $1.toUpperCase()).slice(1)}`,
      package: pack,
      package_dir: pack.replace(/\./g, '/'),
      package_cpp: pack.replace(/\./g, '_'),
      identifier: slug.replace(/[^a-z0-9]+/g, '-').replace(/^-/, ''),
      native: languages !== 'js',
      arch,
      cpp: languages === 'cpp',
      kotlin: languages === 'kotlin-objc' || languages === 'kotlin-swift',
      swift: languages === 'java-swift' || languages === 'kotlin-swift',
      view: moduleType === 'view',
      module: moduleType === 'module'
    },
    author: {
      name: authorName,
      email: authorEmail,
      url: authorUrl
    },
    repo: repoUrl,
    example,
    turborepo,
    year: new Date().getFullYear()
  };

  const copyDir = async (source, dest) => {
    await _fsExtra.default.mkdirp(dest);
    const files = await _fsExtra.default.readdir(source);

    for (const f of files) {
      const target = _path.default.join(dest, _ejs.default.render(f.replace(/^\$/, ''), options, {
        openDelimiter: '{',
        closeDelimiter: '}'
      }));

      const file = _path.default.join(source, f);

      const stats = await _fsExtra.default.stat(file);

      if (stats.isDirectory()) {
        await copyDir(file, target);
      } else if (!file.match(BINARIES)) {
        const content = await _fsExtra.default.readFile(file, 'utf8');
        await _fsExtra.default.writeFile(target, _ejs.default.render(content, options));
      } else {
        await _fsExtra.default.copyFile(file, target);
      }
    }
  };

  await _fsExtra.default.mkdirp(folder);

  if (reactNativeVersion != null) {
    if (example === 'expo') {
      console.warn(`${_kleur.default.yellow('⚠')} Ignoring --react-native-version for Expo example`);
    } else {
      console.log(`${_kleur.default.blue('ℹ')} Using ${_kleur.default.cyan(`react-native@${reactNativeVersion}`)} for the example`);
    }
  }

  const spinner = (0, _ora.default)('Generating example').start();
  await (0, _generateExampleApp.default)({
    type: example,
    dest: folder,
    projectName: options.project.name,
    arch,
    reactNativeVersion
  });
  spinner.text = 'Copying files';
  await copyDir(COMMON_FILES, folder);

  if (turborepo) {
    await copyDir(TURBOREPO_FILES, folder);
  }

  if (languages === 'js') {
    await copyDir(JS_FILES, folder);
    await copyDir(EXPO_FILES, folder);
  } else {
    await copyDir(_path.default.join(EXAMPLE_FILES, 'example'), _path.default.join(folder, 'example'));
    await copyDir(NATIVE_COMMON_FILES, folder);

    if (moduleType === 'module') {
      await copyDir(NATIVE_FILES[`${moduleType}_${arch}`], folder);
    } else {
      await copyDir(NATIVE_FILES[`${moduleType}_${arch}`], folder);
    }

    if (options.project.swift) {
      await copyDir(SWIFT_FILES[`${moduleType}_legacy`], folder);
    } else {
      if (moduleType === 'module') {
        await copyDir(OBJC_FILES[`${moduleType}_common`], folder);
      } else {
        await copyDir(OBJC_FILES[`view_${arch}`], folder);
      }
    }

    const templateType = `${moduleType}_${arch}`;

    if (options.project.kotlin) {
      await copyDir(KOTLIN_FILES[templateType], folder);
    } else {
      await copyDir(JAVA_FILES[templateType], folder);
    }

    if (options.project.cpp) {
      await copyDir(CPP_FILES, folder);
      await _fsExtra.default.remove(_path.default.join(folder, 'ios', `${options.project.name}.m`));
    }

    if (moduleType === 'view') {
      if (arch === 'new' || arch === 'mixed') {
        await copyDir(CPP_VIEW_FILES[`${moduleType}_${arch}`], folder);
      }
    }
  } // Set `react` and `react-native` versions of root `package.json` from example `package.json`


  const examplePackageJson = _fsExtra.default.readJSONSync(_path.default.join(folder, 'example', 'package.json'));

  const rootPackageJson = _fsExtra.default.readJSONSync(_path.default.join(folder, 'package.json'));

  rootPackageJson.devDependencies.react = examplePackageJson.dependencies.react;
  rootPackageJson.devDependencies['react-native'] = examplePackageJson.dependencies['react-native'];

  _fsExtra.default.writeJSONSync(_path.default.join(folder, 'package.json'), rootPackageJson, {
    spaces: 2
  });

  try {
    _crossSpawn.default.sync('git', ['init'], {
      cwd: folder
    });

    _crossSpawn.default.sync('git', ['branch', '-M', 'main'], {
      cwd: folder
    });

    _crossSpawn.default.sync('git', ['add', '.'], {
      cwd: folder
    });

    _crossSpawn.default.sync('git', ['commit', '-m', 'chore: initial commit'], {
      cwd: folder
    });
  } catch (e) {// Ignore error
  }

  spinner.succeed(`Project created successfully at ${_kleur.default.yellow(argv.name)}!\n`);
  const platforms = {
    ios: {
      name: 'iOS',
      color: 'cyan'
    },
    android: {
      name: 'Android',
      color: 'green'
    },
    ...(example === 'expo' ? {
      web: {
        name: 'Web',
        color: 'blue'
      }
    } : null)
  };
  console.log((0, _dedent.default)(`
      ${_kleur.default.magenta(`${_kleur.default.bold('Get started')} with the project`)}${_kleur.default.gray(':')}

        ${_kleur.default.gray('$')} yarn
      ${Object.entries(platforms).map(([script, {
    name,
    color
  }]) => `
      ${_kleur.default[color](`Run the example app on ${_kleur.default.bold(name)}`)}${_kleur.default.gray(':')}

        ${_kleur.default.gray('$')} yarn example ${script}`).join('\n')}

      ${_kleur.default.yellow(`See ${_kleur.default.bold('CONTRIBUTING.md')} for more details. Good luck!`)}
    `));
} // eslint-disable-next-line babel/no-unused-expressions


_yargs.default.command('$0 <name>', 'create a react native library', args, create).demandCommand().recommendCommands().fail((message, error) => {
  console.log('\n');

  if (error) {
    console.log(_kleur.default.red(error.message));
    throw error;
  }

  if (message) {
    console.log(_kleur.default.red(message));
  } else {
    console.log(_kleur.default.red(`An unknown error occurred. See '--help' for usage guide.`));
  }

  process.exit(1);
}).strict().argv;
//# sourceMappingURL=index.js.map